-- phpMyAdmin SQL Dump
-- version 3.5.2.2
-- http://www.phpmyadmin.net
--
-- Хост: localhost
-- Время создания: Дек 13 2016 г., 15:25
-- Версия сервера: 5.6.33-79.0
-- Версия PHP: 5.3.28

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- База данных: `u0155710_default`
--

DELIMITER $$
--
-- Процедуры
--
CREATE DEFINER=`u0155710_default`@`localhost` PROCEDURE `XP1`()
BEGIN
SELECT GROUPS.NAME, AVG(MARKS.VALUE) FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID  JOIN MARKS ON PEOPLE.ID = MARKS.STUDENT_ID  GROUP BY GROUPS.NAME HAVING AVG(MARKS.VALUE) > 3;
END$$

CREATE DEFINER=`u0155710_default`@`localhost` PROCEDURE `XP10`(IN GROUP_NAME CHAR(15), OUT SUB_NAME CHAR(20), OUT MIN_AVG FLOAT)
BEGIN
SELECT @SUB_NAME := SUBJECTS.NAME AS SUBJECT_NAME FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID JOIN MARKS  ON PEOPLE.ID = MARKS.STUDENT_ID JOIN SUBJECTS ON MARKS.SUBJECT_ID = SUBJECTS.ID  WHERE GROUPS.NAME = GROUP_NAME  GROUP BY GROUPS.NAME, SUBJECTS.NAME ORDER BY AVG(MARKS.VALUE) LIMIT 1; SELECT @MIN_AVG := AVG(MARKS.VALUE) AS MINIMAL_AVG FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID JOIN MARKS  ON PEOPLE.ID = MARKS.STUDENT_ID JOIN SUBJECTS ON MARKS.SUBJECT_ID = SUBJECTS.ID  WHERE SUBJECTS.NAME = @SUB_NAME GROUP BY GROUPS.NAME ORDER BY AVG(MARKS.VALUE) LIMIT 1;
END$$

CREATE DEFINER=`u0155710_default`@`localhost` PROCEDURE `XP2`()
BEGIN
SELECT PEOPLE.FIRST_NAME, PEOPLE.LAST_NAME,PEOPLE.PATHER_NAME, GROUPS.NAME, AVG(MARKS.VALUE) AS VAL FROM PEOPLE  JOIN MARKS ON PEOPLE.ID = MARKS.STUDENT_ID JOIN GROUPS ON PEOPLE.GROUP_ID = GROUPS.ID GROUP BY PEOPLE.FIRST_NAME,PEOPLE.LAST_NAME,PEOPLE.PATHER_NAME, GROUPS.NAME ORDER BY VAL DESC LIMIT 3;
END$$

CREATE DEFINER=`u0155710_default`@`localhost` PROCEDURE `XP3`()
BEGIN
SELECT SUBJECTS.NAME, AVG(MARKS.VALUE) AS VAL FROM SUBJECTS JOIN MARKS ON SUBJECTS.ID = MARKS.SUBJECT_ID  JOIN PEOPLE ON MARKS.STUDENT_ID = PEOPLE.ID JOIN GROUPS ON PEOPLE.GROUP_ID = GROUPS.ID WHERE LOCATE('2004', GROUPS.NAME) GROUP BY SUBJECTS.NAME;
END$$

CREATE DEFINER=`u0155710_default`@`localhost` PROCEDURE `XP4`(IN SUBJECTNAME CHAR(20))
BEGIN
SELECT GROUPS.NAME FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID JOIN MARKS ON PEOPLE.ID = MARKS.STUDENT_ID  JOIN SUBJECTS ON MARKS.SUBJECT_ID = SUBJECTS.ID WHERE (SUBJECTS.NAME = SUBJECTNAME) ORDER BY GROUPS.NAME;
END$$

CREATE DEFINER=`u0155710_default`@`localhost` PROCEDURE `XP5`(IN MARK INT)
BEGIN
SELECT PEOPLE.FIRST_NAME, PEOPLE.LAST_NAME, PEOPLE.PATHER_NAME, AVG(MARKS.VALUE) AS VAL FROM PEOPLE  JOIN MARKS ON PEOPLE.ID = MARKS.STUDENT_ID GROUP BY PEOPLE.FIRST_NAME, PEOPLE.LAST_NAME, PEOPLE.PATHER_NAME HAVING VAL > MARK;
END$$

CREATE DEFINER=`u0155710_default`@`localhost` PROCEDURE `XP6`(IN SUBNAME1 CHAR(20), IN SUBNAME2 CHAR(20))
BEGIN
IF(EXISTS(SELECT GROUPS.NAME FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID JOIN MARKS ON PEOPLE.ID = MARKS.STUDENT_ID JOIN SUBJECTS ON MARKS.SUBJECT_ID = SUBJECTS.ID WHERE SUBJECTS.NAME = SUBNAME1 AND GROUPS.NAME IN  (SELECT GROUPS.NAME FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID JOIN MARKS ON PEOPLE.ID = MARKS.STUDENT_ID JOIN SUBJECTS ON MARKS.SUBJECT_ID = SUBJECTS.ID WHERE SUBJECTS.NAME = SUBNAME2 GROUP BY GROUPS.NAME) GROUP BY GROUPS.NAME) )
THEN
SET @GR_NAME := (SELECT GROUPS.NAME FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID JOIN MARKS ON PEOPLE.ID = MARKS.STUDENT_ID JOIN SUBJECTS ON MARKS.SUBJECT_ID = SUBJECTS.ID WHERE SUBJECTS.NAME = SUBNAME1 AND GROUPS.NAME IN  (SELECT GROUPS.NAME FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID JOIN MARKS ON PEOPLE.ID = MARKS.STUDENT_ID JOIN SUBJECTS ON MARKS.SUBJECT_ID = SUBJECTS.ID WHERE SUBJECTS.NAME = SUBNAME2 GROUP BY GROUPS.NAME) GROUP BY GROUPS.NAME);
SET @AVG1 = (SELECT AVG(MARKS.VALUE) FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID JOIN MARKS ON PEOPLE.ID = MARKS.STUDENT_ID JOIN SUBJECTS ON MARKS.SUBJECT_ID = SUBJECTS.ID WHERE (SUBJECTS.NAME = SUBNAME1 AND GROUPS.NAME = @GR_NAME )  GROUP BY GROUPS.NAME);
SET @AVG2 = (SELECT AVG(MARKS.VALUE) FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID JOIN MARKS ON PEOPLE.ID = MARKS.STUDENT_ID JOIN SUBJECTS ON MARKS.SUBJECT_ID = SUBJECTS.ID WHERE (SUBJECTS.NAME = SUBNAME2 AND GROUPS.NAME = @GR_NAME )  GROUP BY GROUPS.NAME);
IF (@AVG1 > @AVG2)
THEN SELECT @GR_NAME;
END IF;
END IF;
END$$

CREATE DEFINER=`u0155710_default`@`localhost` PROCEDURE `XP7`(IN YEARFROM YEAR, IN YEARTO YEAR)
BEGIN
SELECT GROUPS.NAME,SUBSTR(GROUPS.NAME,8,4) AS YEAR, AVG(MARKS.VALUE) AS VAL FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID JOIN MARKS  ON PEOPLE.ID = MARKS.STUDENT_ID  GROUP BY GROUPS.NAME HAVING YEAR BETWEEN YEARFROM AND YEARTO;
END$$

CREATE DEFINER=`u0155710_default`@`localhost` PROCEDURE `XP8`(IN SUB_NAME CHAR(20), OUT MAX_MARK INT)
BEGIN
SELECT @MAX_MARK := AVG(MARKS.VALUE) AS VAL FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID JOIN MARKS  ON PEOPLE.ID = MARKS.STUDENT_ID JOIN SUBJECTS ON MARKS.SUBJECT_ID = SUBJECTS.ID WHERE SUBJECTS.NAME = SUB_NAME GROUP BY GROUPS.NAME ORDER BY VAL DESC LIMIT 1;
END$$

CREATE DEFINER=`u0155710_default`@`localhost` PROCEDURE `XP9`(IN PR_ID INT, OUT GR_NAME CHAR(15))
BEGIN
SELECT @GR_NAME := GROUPS.NAME AS GROUP_NAME FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID  JOIN MARKS ON PEOPLE.ID = MARKS.TEACHER_ID  WHERE PEOPLE.ID = PR_ID GROUP BY GROUPS.NAME,PEOPLE.FIRST_NAME, PEOPLE.LAST_NAME ORDER BY AVG(MARKS.VALUE) LIMIT 1;   
END$$

CREATE DEFINER=`u0155710_default`@`localhost` PROCEDURE `XPCUR`(IN YEARFROM INT, IN YEARTO 
INT)
BEGIN  
DECLARE DONE INT DEFAULT 0;
DECLARE A INT;
DECLARE C FLOAT DEFAULT 0.0;
DECLARE B,D FLOAT;
DECLARE CUR1 CURSOR FOR SELECT SUBSTR(GROUPS.NAME,8,4) AS YEAR, AVG(MARKS.VALUE) AS VAL FROM GROUPS JOIN PEOPLE ON GROUPS.ID = PEOPLE.GROUP_ID JOIN MARKS ON PEOPLE.ID = MARKS.STUDENT_ID WHERE GROUPS.NAME <> 'DELETED' GROUP BY YEAR HAVING YEAR BETWEEN YEARFROM AND YEARTO; 
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET DONE = 1;  
OPEN CUR1;
REPEAT
FETCH CUR1 INTO A,B;
IF NOT DONE THEN
SET D = B - C;
SET C = B;
SELECT A AS YEAR,B AS AVG_MARK,D AS DIFFERENT;
END IF; UNTIL DONE END REPEAT;  
CLOSE CUR1;
END$$

DELIMITER ;

-- --------------------------------------------------------

--
-- Дублирующая структура для представления `ALLTEACHERS`
--
CREATE TABLE IF NOT EXISTS `ALLTEACHERS` (
`FIRST_NAME` varchar(20)
,`LAST_NAME` varchar(20)
,`PATHER_NAME` varchar(20)
);
-- --------------------------------------------------------

--
-- Дублирующая структура для представления `AVGMARKYEAR`
--
CREATE TABLE IF NOT EXISTS `AVGMARKYEAR` (
`YEAR` varchar(4)
,`AVG(MARKS.VALUE)` decimal(14,4)
);
-- --------------------------------------------------------

--
-- Структура таблицы `GROUPS`
--

CREATE TABLE IF NOT EXISTS `GROUPS` (
  `ID` int(11) NOT NULL,
  `NAME` varchar(50) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `GROUPS`
--

INSERT INTO `GROUPS` (`ID`, `NAME`) VALUES
(1, ' '),
(2, '3084/1_2004'),
(3, '3004/1_2006'),
(4, '3084/2_2004'),
(5, '3041/1_2007'),
(6, '3081/1_2004'),
(7, '3094/4_2004'),
(8, '2024/1_2005'),
(9, '2024/1_2001');

--
-- Триггеры `GROUPS`
--
DROP TRIGGER IF EXISTS `DROPGROUPANDSTUD`;
DELIMITER //
CREATE TRIGGER `DROPGROUPANDSTUD` BEFORE DELETE ON `GROUPS`
 FOR EACH ROW BEGIN IF EXISTS(SELECT * FROM PEOPLE WHERE GROUP_ID = OLD.ID)
THEN  UPDATE PEOPLE SET PEOPLE.GROUP_ID = 17 WHERE PEOPLE.GROUP_ID = OLD.ID;
END IF;
END
//
DELIMITER ;
DROP TRIGGER IF EXISTS `MATCHGROUP`;
DELIMITER //
CREATE TRIGGER `MATCHGROUP` BEFORE INSERT ON `GROUPS`
 FOR EACH ROW BEGIN IF EXISTS (SELECT NAME FROM GROUPS WHERE NAME = NEW.NAME )
THEN SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = "THIS GROUP ALREADY EXISTS!";
END IF;
END
//
DELIMITER ;
DROP TRIGGER IF EXISTS `MOREMARK`;
DELIMITER //
CREATE TRIGGER `MOREMARK` BEFORE UPDATE ON `GROUPS`
 FOR EACH ROW BEGIN IF EXISTS(SELECT * FROM PEOPLE JOIN MARKS ON PEOPLE.ID = MARKS.STUDENT_ID WHERE PEOPLE.GROUP_ID = NEW.ID) AND  (NEW.NAME <> OLD.NAME)
THEN SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = "STUDENT HAVE A MARK";
END IF;
END
//
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `LISTTABS`
--

CREATE TABLE IF NOT EXISTS `LISTTABS` (
  `ID` int(11) NOT NULL,
  `NAME` varchar(25) NOT NULL,
  `VALUE` varchar(25) NOT NULL,
  `MASK` varchar(100) NOT NULL,
  UNIQUE KEY `ID` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf32;

--
-- Дамп данных таблицы `LISTTABS`
--

INSERT INTO `LISTTABS` (`ID`, `NAME`, `VALUE`, `MASK`) VALUES
(1, 'Люди', 'PEOPLE', '06'),
(2, 'Предметы', 'SUBJECTS', '02'),
(3, 'Группы', 'GROUPS', '02'),
(4, 'Отметки', 'MARKS', '05'),
(5, 'Пользователи', 'USERS', '14');

-- --------------------------------------------------------

--
-- Структура таблицы `MARKS`
--

CREATE TABLE IF NOT EXISTS `MARKS` (
  `ID` int(11) NOT NULL,
  `STUDENT_ID` int(11) NOT NULL,
  `SUBJECT_ID` int(11) NOT NULL,
  `TEACHER_ID` int(11) NOT NULL,
  `VALUE` int(11) NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `STUDENT_ID` (`STUDENT_ID`),
  KEY `SUBJECT_ID` (`SUBJECT_ID`),
  KEY `TEACHER_ID` (`TEACHER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `MARKS`
--

INSERT INTO `MARKS` (`ID`, `STUDENT_ID`, `SUBJECT_ID`, `TEACHER_ID`, `VALUE`) VALUES
(1, 1, 1, 7, 4),
(2, 1, 5, 7, 5),
(3, 1, 2, 7, 5),
(4, 2, 3, 7, 2),
(5, 3, 2, 7, 3),
(6, 3, 5, 7, 5),
(7, 5, 6, 7, 4),
(8, 5, 8, 7, 5),
(9, 6, 1, 7, 4),
(10, 6, 3, 7, 5),
(11, 6, 5, 7, 4),
(12, 8, 2, 7, 5),
(13, 8, 4, 7, 4),
(14, 5, 2, 7, 3),
(15, 8, 9, 4, 3),
(16, 8, 5, 4, 3);

--
-- Триггеры `MARKS`
--
DROP TRIGGER IF EXISTS `ERRORMARK`;
DELIMITER //
CREATE TRIGGER `ERRORMARK` BEFORE INSERT ON `MARKS`
 FOR EACH ROW BEGIN
IF EXISTS (SELECT VALUE FROM MARKS WHERE NEW.VALUE NOT BETWEEN 2 AND 5)
THEN SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = "INCORRECT MARK!";
END IF;
END
//
DELIMITER ;
DROP TRIGGER IF EXISTS `NTCHANTEAAMAR`;
DELIMITER //
CREATE TRIGGER `NTCHANTEAAMAR` BEFORE UPDATE ON `MARKS`
 FOR EACH ROW BEGIN IF EXISTS(SELECT * FROM MARKS WHERE TEACHER_ID  <> NEW.TEACHER_ID) AND (OLD.VALUE = NEW.VALUE)
THEN SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = "THIS TEACHER SET MARK JET";
END IF;
END
//
DELIMITER ;

-- --------------------------------------------------------

--
-- Дублирующая структура для представления `MARKSGET`
--
CREATE TABLE IF NOT EXISTS `MARKSGET` (
`FIRST_NAME` varchar(20)
,`LAST_NAME` varchar(20)
,`PATHER_NAME` varchar(20)
);
-- --------------------------------------------------------

--
-- Структура таблицы `PEOPLE`
--

CREATE TABLE IF NOT EXISTS `PEOPLE` (
  `ID` int(11) NOT NULL,
  `FIRST_NAME` varchar(20) NOT NULL,
  `LAST_NAME` varchar(20) NOT NULL,
  `PATHER_NAME` varchar(20) NOT NULL,
  `GROUP_ID` int(11) NOT NULL,
  `TYPE` char(1) NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `GROUP_ID` (`GROUP_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `PEOPLE`
--

INSERT INTO `PEOPLE` (`ID`, `FIRST_NAME`, `LAST_NAME`, `PATHER_NAME`, `GROUP_ID`, `TYPE`) VALUES
(1, 'Andrey', 'Grinko', 'Olegovich', 5, 'S'),
(2, 'Boris', 'Dyshev', 'Ilich', 3, 'S'),
(3, 'Matu', 'Olashen', 'Viktorovna', 4, 'S'),
(4, 'Nasta', 'Harova', 'Andreeva', 1, 'P'),
(5, 'Viktor', 'Rojik', 'Valerevich', 7, 'S'),
(6, 'Artur', 'Homov', 'Arturovich', 2, 'S'),
(7, 'Garik', 'Martisayn', 'Harlamov', 1, 'P'),
(8, 'Kristina', 'Frayna', 'Kirilova', 7, 'S');

--
-- Триггеры `PEOPLE`
--
DROP TRIGGER IF EXISTS `DELSTUDANDMARK`;
DELIMITER //
CREATE TRIGGER `DELSTUDANDMARK` BEFORE DELETE ON `PEOPLE`
 FOR EACH ROW BEGIN DELETE MARKS FROM MARKS WHERE STUDENT_ID = OLD.ID;
END
//
DELIMITER ;
DROP TRIGGER IF EXISTS `NOTPS`;
DELIMITER //
CREATE TRIGGER `NOTPS` BEFORE INSERT ON `PEOPLE`
 FOR EACH ROW BEGIN IF EXISTS (SELECT TYPE FROM PEOPLE WHERE NEW.TYPE NOT IN ('P', 'S'))
THEN SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = "INCORRECT TYPE!";
END IF;
END
//
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `SUBJECTS`
--

CREATE TABLE IF NOT EXISTS `SUBJECTS` (
  `ID` int(11) NOT NULL,
  `NAME` varchar(50) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `SUBJECTS`
--

INSERT INTO `SUBJECTS` (`ID`, `NAME`) VALUES
(1, 'Mathematica'),
(2, 'Physics'),
(3, 'English'),
(4, 'Database'),
(5, 'OOP'),
(6, 'Music'),
(7, 'Philosophy'),
(8, 'History'),
(9, 'Astronomy'),
(10, 'Literature'),
(11, 'Probability Theory'),
(12, 'Aerodynamics'),
(13, 'ProgrmEngine'),
(14, 'Geometry'),
(15, 'Biology');

--
-- Триггеры `SUBJECTS`
--
DROP TRIGGER IF EXISTS `DNTCHANSUB`;
DELIMITER //
CREATE TRIGGER `DNTCHANSUB` BEFORE UPDATE ON `SUBJECTS`
 FOR EACH ROW BEGIN IF EXISTS(SELECT * FROM MARKS WHERE SUBJECT_ID = NEW.ID) AND (NEW.NAME <> OLD.NAME)
THEN SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = "DONT CHANGE LINKER SUBJ";
END IF;
END
//
DELIMITER ;
DROP TRIGGER IF EXISTS `TRANSAKTONSUBJ`;
DELIMITER //
CREATE TRIGGER `TRANSAKTONSUBJ` BEFORE DELETE ON `SUBJECTS`
 FOR EACH ROW BEGIN  
IF (EXISTS(SELECT * FROM MARKS WHERE SUBJECT_ID = OLD.ID)) THEN SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = "YOU CANT DROP THIS SUBJECT";
END IF;  
END
//
DELIMITER ;

-- --------------------------------------------------------

--
-- Дублирующая структура для представления `TEACHERSONSUB`
--
CREATE TABLE IF NOT EXISTS `TEACHERSONSUB` (
`FIRST_NAME` varchar(20)
,`LAST_NAME` varchar(20)
,`PATHER_NAME` varchar(20)
,`NAME` varchar(50)
,`VAL` decimal(14,4)
);
-- --------------------------------------------------------

--
-- Дублирующая структура для представления `THISYEAR`
--
CREATE TABLE IF NOT EXISTS `THISYEAR` (
`FIRST_NAME` varchar(20)
,`LAST_NAME` varchar(20)
,`PATHER_NAME` varchar(20)
);
-- --------------------------------------------------------

--
-- Структура таблицы `USERS`
--

CREATE TABLE IF NOT EXISTS `USERS` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `LOG` varchar(20) NOT NULL,
  `PAS` varchar(40) NOT NULL,
  `PER` int(11) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3 ;

--
-- Дамп данных таблицы `USERS`
--

INSERT INTO `USERS` (`ID`, `LOG`, `PAS`, `PER`) VALUES
(1, 'admin', 'cce6545f08aea8e0adcd4c38a22e12cd', 1),
(2, 'user', 'e1b4f610ceb4e62090f96c853011aec5', 0);

-- --------------------------------------------------------

--
-- Структура для представления `ALLTEACHERS`
--
DROP TABLE IF EXISTS `ALLTEACHERS`;

CREATE ALGORITHM=UNDEFINED DEFINER=`u0155710_default`@`localhost` SQL SECURITY DEFINER VIEW `ALLTEACHERS` AS select `PEOPLE`.`FIRST_NAME` AS `FIRST_NAME`,`PEOPLE`.`LAST_NAME` AS `LAST_NAME`,`PEOPLE`.`PATHER_NAME` AS `PATHER_NAME` from `PEOPLE` where (`PEOPLE`.`TYPE` = 'P');

-- --------------------------------------------------------

--
-- Структура для представления `AVGMARKYEAR`
--
DROP TABLE IF EXISTS `AVGMARKYEAR`;

CREATE ALGORITHM=UNDEFINED DEFINER=`u0155710_default`@`localhost` SQL SECURITY DEFINER VIEW `AVGMARKYEAR` AS select substr(`GROUPS`.`NAME`,8,4) AS `YEAR`,avg(`MARKS`.`VALUE`) AS `AVG(MARKS.VALUE)` from ((`GROUPS` join `PEOPLE` on((`GROUPS`.`ID` = `PEOPLE`.`GROUP_ID`))) join `MARKS` on((`PEOPLE`.`ID` = `MARKS`.`STUDENT_ID`))) group by substr(`GROUPS`.`NAME`,8,4);

-- --------------------------------------------------------

--
-- Структура для представления `MARKSGET`
--
DROP TABLE IF EXISTS `MARKSGET`;

CREATE ALGORITHM=UNDEFINED DEFINER=`u0155710_default`@`localhost` SQL SECURITY DEFINER VIEW `MARKSGET` AS select `PEOPLE`.`FIRST_NAME` AS `FIRST_NAME`,`PEOPLE`.`LAST_NAME` AS `LAST_NAME`,`PEOPLE`.`PATHER_NAME` AS `PATHER_NAME` from `PEOPLE` where `PEOPLE`.`ID` in (select `MARKS`.`STUDENT_ID` from `MARKS` where (`MARKS`.`TEACHER_ID` = 4));

-- --------------------------------------------------------

--
-- Структура для представления `TEACHERSONSUB`
--
DROP TABLE IF EXISTS `TEACHERSONSUB`;

CREATE ALGORITHM=UNDEFINED DEFINER=`u0155710_default`@`localhost` SQL SECURITY DEFINER VIEW `TEACHERSONSUB` AS select `PEOPLE`.`FIRST_NAME` AS `FIRST_NAME`,`PEOPLE`.`LAST_NAME` AS `LAST_NAME`,`PEOPLE`.`PATHER_NAME` AS `PATHER_NAME`,`SUBJECTS`.`NAME` AS `NAME`,avg(`MARKS`.`VALUE`) AS `VAL` from ((`PEOPLE` join `MARKS` on((`PEOPLE`.`ID` = `MARKS`.`TEACHER_ID`))) join `SUBJECTS` on((`MARKS`.`SUBJECT_ID` = `SUBJECTS`.`ID`))) group by `PEOPLE`.`FIRST_NAME`,`PEOPLE`.`LAST_NAME`,`PEOPLE`.`PATHER_NAME`,`SUBJECTS`.`NAME`;

-- --------------------------------------------------------

--
-- Структура для представления `THISYEAR`
--
DROP TABLE IF EXISTS `THISYEAR`;

CREATE ALGORITHM=UNDEFINED DEFINER=`u0155710_default`@`localhost` SQL SECURITY DEFINER VIEW `THISYEAR` AS select `PEOPLE`.`FIRST_NAME` AS `FIRST_NAME`,`PEOPLE`.`LAST_NAME` AS `LAST_NAME`,`PEOPLE`.`PATHER_NAME` AS `PATHER_NAME` from `PEOPLE` where `PEOPLE`.`GROUP_ID` in (select `GROUPS`.`ID` from `GROUPS` where (substr(`GROUPS`.`NAME`,8,4) = '2004'));

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `MARKS`
--
ALTER TABLE `MARKS`
  ADD CONSTRAINT `MARKS_ibfk_1` FOREIGN KEY (`STUDENT_ID`) REFERENCES `PEOPLE` (`ID`),
  ADD CONSTRAINT `MARKS_ibfk_2` FOREIGN KEY (`SUBJECT_ID`) REFERENCES `SUBJECTS` (`ID`),
  ADD CONSTRAINT `MARKS_ibfk_3` FOREIGN KEY (`TEACHER_ID`) REFERENCES `PEOPLE` (`ID`);

--
-- Ограничения внешнего ключа таблицы `PEOPLE`
--
ALTER TABLE `PEOPLE`
  ADD CONSTRAINT `PEOPLE_ibfk_1` FOREIGN KEY (`GROUP_ID`) REFERENCES `GROUPS` (`ID`);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
